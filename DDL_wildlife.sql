DROP DATABASE IF EXISTS WILDLIFE;
CREATE DATABASE WILDLIFE;

\c wildlife

DROP TABLE IF EXISTS CUSTOMER CASCADE;
DROP TABLE IF EXISTS ZOO CASCADE;
DROP TABLE IF EXISTS EMPLOYEE CASCADE;
DROP TABLE IF EXISTS TICKET CASCADE;
DROP TABLE IF EXISTS ANIMAL CASCADE;
DROP TABLE IF EXISTS ANIMAL_GUIDE CASCADE;
DROP TABLE IF EXISTS ANIMAL_KIND CASCADE;
DROP TABLE IF EXISTS ANIMAL_DETAIL CASCADE;
DROP TABLE IF EXISTS ZOO_GUIDE CASCADE;
DROP TABLE IF EXISTS ANIMALS_AND_ITS_KIND CASCADE;
DROP TABLE IF EXISTS DETAIL_FOR_ANIMAL CASCADE;
DROP TABLE IF EXISTS LOOK_AFTER CASCADE;
DROP TABLE IF EXISTS GOES_TO CASCADE;
DROP TABLE IF EXISTS MANAGES CASCADE;
DROP TABLE IF EXISTS CONSISTS CASCADE;

CREATE TABLE CUSTOMER(
	Cid		CHAR(5)		NOT NULL,
	C_FName		VARCHAR(20)	NOT NULL,
	C_LName		VARCHAR(20)	NOT NULL,
	Email		VARCHAR(50),
	Address		VARCHAR(100),
	CreditCardNo 	NUMERIC(10,0),
	PRIMARY KEY(Cid)
);
CREATE TABLE ZOO (
	Zid		CHAR(4)		NOT NULL,
	Hours		DECIMAL(2,0)	NOT NULL,
	Zname		VARCHAR(100)	NOT NULL,
	Location		VARCHAR(100)	NOT NULL,
	Contact		NUMERIC(10)	NOT NULL,
	PRIMARY KEY(Zid)
 );

CREATE TABLE EMPLOYEE(
	Eid		CHAR(10)		NOT NULL,
	Zooid		CHAR(4)		NOT NULL,
	EFname		VARCHAR(30)	NOT NULL,
	ELname		VARCHAR(30)	NOT NULL,        
	PhoneNo		NUMERIC(10,0)	NOT NULL,
	Salary		DECIMAL(10,2)	NOT NULL	CHECK(Salary > 10000),
	PRIMARY KEY(Eid),
	FOREIGN KEY(Zooid) REFERENCES  ZOO(Zid)
		ON DELETE CASCADE	ON UPDATE CASCADE
);
CREATE TABLE TICKET(
	Tid		INT		NOT NULL,
	CustId		CHAR(5)		NOT NULL,
	Price		INT		NOT NULL	CHECK(Price>25 ),
	Valid_Date	DATE		NOT NULL,	
	PRIMARY KEY(Tid),
	FOREIGN KEY(CustId) REFERENCES  CUSTOMER(Cid)
		ON DELETE CASCADE	ON UPDATE CASCADE
	
);

CREATE TABLE ANIMAL(
	Aid		CHAR(4)		NOT NULL,
	Gender		CHAR		NOT NULL,
	Cage_Num	INT		NOT NULL,
	FeedTime		TIME		NOT NULL	DEFAULT '10:30:00',
	PRIMARY KEY(Aid)
);
CREATE TABLE ANIMAL_GUIDE(
	AGid			VARCHAR(13)	NOT NULL,
	ZooIntroduction		VARCHAR(400)	NOT NULL,
	UpdatedYear		CHAR(4)		NOT NULL	DEFAULT '2008',
	PRIMARY KEY(AGid)
);
CREATE TABLE ANIMAL_KIND(
	AKid		INT			NOT NULL,
	ZooRegion		VARCHAR(50)		NOT NULL,
	AName		VARCHAR(20)		NOT NULL,
	PhysicalCharacteristics 	VARCHAR(700)	DEFAULT 'NO INFORMATION AVAILABLE',
	Diet			VARCHAR(40),
	Population			INT		NOT NULL,
	PRIMARY KEY (AKid)
);

CREATE TABLE ANIMAL_DETAIL(
	ADid		CHAR(4)		NOT NULL,
	Height		INT,
	Weight		INT,
	Age		INT,
	PRIMARY KEY(ADid)
);

CREATE TABLE DETAIL_FOR_ANIMAL(
ADid		CHAR(4)		NOT NULL,
Animal_id		CHAR(4)		NOT NULL,
FOREIGN KEY(Animal_id) REFERENCES ANIMAL(Aid)
	ON DELETE CASCADE		ON UPDATE CASCADE

);

CREATE TABLE ZOO_GUIDE(
	Zid		CHAR(4)		NOT NULL,
	AGid		VARCHAR(30)	NOT NULL,
	FOREIGN KEY(AGid) REFERENCES ANIMAL_GUIDE(AGid)
		ON DELETE CASCADE	ON UPDATE CASCADE,
	FOREIGN KEY(Zid) REFERENCES ZOO(Zid)
		ON DELETE CASCADE	ON UPDATE CASCADE

); 
CREATE TABLE ANIMALS_AND_ITS_KIND(
	Aid		CHAR(4)		NOT NULL,
	AKid		INT		NOT NULL,
	PRIMARY KEY(Aid),
	FOREIGN KEY(AKid) REFERENCES ANIMAL_KIND(AKid)
		ON DELETE CASCADE	ON UPDATE CASCADE
);

CREATE TABLE LOOK_AFTER (
	  Aid		CHAR(4)		NOT NULL,
	  Empid 		CHAR(10)		NOT NULL,
	FOREIGN KEY(Aid) REFERENCES ANIMAL(Aid)
		ON DELETE CASCADE	ON UPDATE CASCADE,
	FOREIGN KEY(Empid) REFERENCES EMPLOYEE(Eid)
		ON DELETE CASCADE	ON UPDATE CASCADE


); 
CREATE TABLE GOES_TO(
	Cid			CHAR(5)		NOT NULL,
	Zid			CHAR(4)		NOT NULL,
	FOREIGN KEY(Cid) REFERENCES CUSTOMER(Cid)
		ON DELETE CASCADE	ON UPDATE CASCADE,
	FOREIGN KEY(Zid) REFERENCES ZOO(Zid)
		ON DELETE CASCADE	ON UPDATE CASCADE


);

CREATE TABLE MANAGES(
	EmpId			CHAR(10)		NOT NULL,
	TktId			INT		NOT NULL,
	FOREIGN KEY(EmpId) REFERENCES EMPLOYEE(Eid)
		ON DELETE CASCADE	ON UPDATE CASCADE,
	FOREIGN KEY(TktId)  REFERENCES TICKET(Tid)
		ON DELETE CASCADE	ON UPDATE CASCADE
);

CREATE TABLE CONSISTS(
	AGid		VARCHAR(13)	NOT NULL,
	AKid		INT		NOT NULL,
	FOREIGN KEY(AGid) REFERENCES ANIMAL_GUIDE(AGid)
		ON DELETE CASCADE	ON UPDATE CASCADE,
	FOREIGN KEY(AKid) REFERENCES ANIMAL_KIND(AKid)
		ON DELETE CASCADE	ON UPDATE CASCADE
);


CREATE OR REPLACE  FUNCTION log_alert() RETURNS TRIGGER AS $$
BEGIN 
	IF NEW.Population < 5 THEN
		RAISE EXCEPTION 'ALERT ANIMALS BEING ENDANGERED';
	END IF;
	RETURN current_timestamp;
END;$$
LANGUAGE PLPGSQL;

CREATE TRIGGER alert
    AFTER  UPDATE OF POPULATION ON ANIMAL_KIND
    FOR EACH ROW
    WHEN (OLD.POPULATION IS DISTINCT FROM NEW.POPULATION)
    EXECUTE FUNCTION log_alert();

CREATE TABLE EMPLOYEE_AUDIT(
	Eid		CHAR(10)		NOT NULL,
	Salary		DECIMAL(10,2)	NOT NULL,
	changed_on	TIMESTAMP(6)	NOT NULL
);

CREATE OR REPLACE FUNCTION log_employee_update()
  RETURNS trigger AS $$
BEGIN
	IF NEW.Salary <> OLD.Salary THEN
		 INSERT INTO EMPLOYEE_AUDIT(Eid,Salary,changed_on)
		 VALUES(OLD.Eid,OLD.Salary,now());
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER check_update_on_employee
    AFTER UPDATE ON EMPLOYEE
    FOR EACH ROW
    WHEN (OLD.Salary IS DISTINCT FROM NEW.Salary)
    EXECUTE FUNCTION log_employee_update();

CREATE TABLE EMPLOYEE_AUDIT_NAME(
	Eid		CHAR(10)		NOT NULL,
	ELname		VARCHAR(30)	NOT NULL,
	changed_on	TIMESTAMP(6)	NOT NULL
);

CREATE OR REPLACE FUNCTION log_employeeDetail_update()
  RETURNS trigger AS $$
BEGIN
	IF NEW.ELname <> OLD.ELname THEN
		 INSERT INTO EMPLOYEE_AUDIT_NAME(Eid,ELname,changed_on)
		 VALUES(OLD.Eid,OLD.ELname,now());
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER check_update_on_employeeDetail
    AFTER UPDATE ON EMPLOYEE
    FOR EACH ROW
    WHEN (OLD.ELname IS DISTINCT FROM NEW.ELname)
    EXECUTE FUNCTION log_employeeDetail_update();